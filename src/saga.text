Redux Saga is a middleware library for Redux that allows you to handle side effects, such as asynchronous actions, in a more manageable and declarative way. It works by leveraging generator functions to create sagas, which are responsible for coordinating and handling the side effects.

yarn add redux-saga
import {all, call} from 'redux-saga/effects'

ES6 generator function ( function* )

SAGA REPLACE THUNK

IN store.js
Replace thunk with import createSagaMiddleware from '@redux-saga/core' 
import { rootSaga } from './root-saga';
const sagaMiddleware = createSagaMiddleware();
replace thunk with sagaMiddleware
after the store has been instantiated, MAKE sagaMiddleware.run()
pass the rootSaga - sagaMiddleware.run(rootSaga)

review
generator functions offer a way to create iterable sequences that can be controlled and iterated over using iterators, while regular functions execute linearly and return a value or perform actions without the ability to pause or resume execution.